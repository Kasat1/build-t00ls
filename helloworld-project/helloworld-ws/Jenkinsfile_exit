pipeline {
    agent any
    environment {
        imageName = 'helloworld-akasatau-${BUILD_NUMBER}'
        registryCredentials = "Nexus_admin"
        registry = "localhost:8082"
        dockerImage = ''
    }
    tools { 
        maven 'mvn3' 
    }
    stages {
        stage('Git check')  {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Kasat1/build-t00ls.git'
            }
        }
        
        stage('Package') {
            steps {
                dir('helloworld-project/helloworld-ws/') {
                  sh 'mvn clean install'
                }
            }
        }
        stage('Sonar Scan') {
            steps {
                dir('helloworld-project/helloworld-ws/') {
                  sh 'echo "Sonar Scan"'
                }
            }
        }

         stage('Run Tests') {
            parallel {
                stage('pre-integration-test') {
                    steps {
                        dir('helloworld-project/helloworld-ws/'){
                        script {
                            sh 'mvn pre-integration-test' }
                    }
                    }
                }
                stage('integration-test') {
                    steps {
                        dir('helloworld-project/helloworld-ws/'){
                        script {
                            sh 'echo "integration-test"' }
                    }
                    }
                }
                 stage('post-integration-test') {
                    steps {
                        dir('helloworld-project/helloworld-ws/'){
                        script {
                            sh 'echo "post-integration-test"' }
                    }
                    }
                }
                
            }
        }
        stage('Triggered Job') {
            steps {
                dir('helloworld-project/helloworld-ws/') {
                  sh 'echo "Triggerred Job" > output.log'
                }
            }
        }

            stage('Packaging and Publishing results') {
            parallel {
                stage('Archiving artifact') {
                    steps {
                        dir('helloworld-project/helloworld-ws/'){
                        script {
                            sh 'tar cvf pipeline-akasatau-{$BUILD_NUMBER}.tar.gz output.log Jenkinsfile_exit' }
                    }
                    }
                }
                stage('Building image') {
                    steps {
                        dir('helloworld-project/helloworld-ws/') {
                            script {
                                    withDockerServer([uri: 'tcp://10.0.2.15:4243']){
                                        dockerImage = docker.build imageName
                                    }
                            }
                        }
                    }
                }
                
                
            }
        }




  stage('Uploading to Nexus') {
         steps{  
             script {
                 withDockerServer([uri: 'tcp://10.0.2.15:4243']){
                    docker.withRegistry( 'http://'+registry, registryCredentials ) {
                    dockerImage.push("rc-${env.BUILD_NUMBER}")
                    dockerImage.push("latest") }
              }
            }
          }
        }


        stage('Stop old container') {
         steps {
             script {
                withDockerServer([uri: 'tcp://10.0.2.15:4243']){
                    sh 'docker ps -a -fname=helloworld-ws -q | xargs -r docker container rm -f'
            } 
         }
        }
        }
        stage('Docker Run') {
           steps{
             script {
                  withDockerServer([uri: 'tcp://10.0.2.15:4243']){
                    sh 'docker run -d -p 80:8080 --name helloworld-ws ' + registry + '/helloworld-akasatau:${BUILD_NUMBER}'
                  }
                }
             }
        }
         stage('Check ') {
           steps{
             script {   
                 withDockerServer([uri: 'tcp://10.0.2.15:4243']){
                  sh 'docker ps -f "status=running" '
                }
             }
        }
    }
    }
}   
